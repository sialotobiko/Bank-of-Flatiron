{"ast":null,"code":"\"use strict\";\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar pluralize = require('pluralize');\n\nmodule.exports = {\n  getRemovable: getRemovable,\n  createId: createId,\n  deepQuery: deepQuery\n}; // Returns document ids that have unsatisfied relations\n// Example: a comment that references a post that doesn't exist\n\nfunction getRemovable(db, opts) {\n  var _ = this;\n\n  var removable = [];\n\n  _.each(db, function (coll, collName) {\n    _.each(coll, function (doc) {\n      _.each(doc, function (value, key) {\n        if (new RegExp(\"\".concat(opts.foreignKeySuffix, \"$\")).test(key)) {\n          // Remove foreign key suffix and pluralize it\n          // Example postId -> posts\n          var refName = pluralize.plural(key.replace(new RegExp(\"\".concat(opts.foreignKeySuffix, \"$\")), '')); // Test if table exists\n\n          if (db[refName]) {\n            // Test if references is defined in table\n            var ref = _.getById(db[refName], value);\n\n            if (_.isUndefined(ref)) {\n              removable.push({\n                name: collName,\n                id: doc.id\n              });\n            }\n          }\n        }\n      });\n    });\n  });\n\n  return removable;\n} // Return incremented id or uuid\n// Used to override lodash-id's createId with utils.createId\n\n\nfunction createId(coll) {\n  var _ = this;\n\n  var idProperty = _.__id();\n\n  if (_.isEmpty(coll)) {\n    return 1;\n  } else {\n    var id = _(coll).maxBy(idProperty)[idProperty]; // Increment integer id or generate string id\n\n\n    return _.isFinite(id) ? ++id : nanoid(7);\n  }\n}\n\nfunction deepQuery(value, q) {\n  var _ = this;\n\n  if (value && q) {\n    if (_.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        if (_.deepQuery(value[i], q)) {\n          return true;\n        }\n      }\n    } else if (_.isObject(value) && !_.isArray(value)) {\n      for (var k in value) {\n        if (_.deepQuery(value[k], q)) {\n          return true;\n        }\n      }\n    } else if (value.toString().toLowerCase().indexOf(q) !== -1) {\n      return true;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}