{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar express = require('express');\n\nvar _ = require('lodash');\n\nvar pluralize = require('pluralize');\n\nvar write = require('./write');\n\nvar getFullURL = require('./get-full-url');\n\nvar utils = require('../utils');\n\nvar delay = require('./delay');\n\nmodule.exports = function (db, name, opts) {\n  // Create router\n  var router = express.Router();\n  router.use(delay); // Embed function used in GET /name and GET /name/id\n\n  function embed(resource, e) {\n    e && [].concat(e).forEach(function (externalResource) {\n      if (db.get(externalResource).value) {\n        var query = {};\n        var singularResource = pluralize.singular(name);\n        query[\"\".concat(singularResource).concat(opts.foreignKeySuffix)] = resource.id;\n        resource[externalResource] = db.get(externalResource).filter(query).value();\n      }\n    });\n  } // Expand function used in GET /name and GET /name/id\n\n\n  function expand(resource, e) {\n    e && [].concat(e).forEach(function (innerResource) {\n      var plural = pluralize(innerResource);\n\n      if (db.get(plural).value()) {\n        var prop = \"\".concat(innerResource).concat(opts.foreignKeySuffix);\n        resource[innerResource] = db.get(plural).getById(resource[prop]).value();\n      }\n    });\n  } // GET /name\n  // GET /name?q=\n  // GET /name?attr=&attr=\n  // GET /name?_end=&\n  // GET /name?_start=&_end=&\n  // GET /name?_embed=&_expand=\n\n\n  function list(req, res, next) {\n    // Resource chain\n    var chain = db.get(name); // Remove q, _start, _end, ... from req.query to avoid filtering using those\n    // parameters\n\n    var q = req.query.q;\n    var _start = req.query._start;\n    var _end = req.query._end;\n    var _page = req.query._page;\n    var _sort = req.query._sort;\n    var _order = req.query._order;\n    var _limit = req.query._limit;\n    var _embed = req.query._embed;\n    var _expand = req.query._expand;\n    delete req.query.q;\n    delete req.query._start;\n    delete req.query._end;\n    delete req.query._sort;\n    delete req.query._order;\n    delete req.query._limit;\n    delete req.query._embed;\n    delete req.query._expand; // Automatically delete query parameters that can't be found\n    // in the database\n\n    Object.keys(req.query).forEach(function (query) {\n      var arr = db.get(name).value();\n\n      for (var i in arr) {\n        if (_.has(arr[i], query) || query === 'callback' || query === '_' || /_lte$/.test(query) || /_gte$/.test(query) || /_ne$/.test(query) || /_like$/.test(query)) return;\n      }\n\n      delete req.query[query];\n    });\n\n    if (q) {\n      // Full-text search\n      if (Array.isArray(q)) {\n        q = q[0];\n      }\n\n      q = q.toLowerCase();\n      chain = chain.filter(function (obj) {\n        for (var key in obj) {\n          var value = obj[key];\n\n          if (db._.deepQuery(value, q)) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n    }\n\n    Object.keys(req.query).forEach(function (key) {\n      // Don't take into account JSONP query parameters\n      // jQuery adds a '_' query parameter too\n      if (key !== 'callback' && key !== '_') {\n        // Always use an array, in case req.query is an array\n        var arr = [].concat(req.query[key]);\n        var isDifferent = /_ne$/.test(key);\n        var isRange = /_lte$/.test(key) || /_gte$/.test(key);\n        var isLike = /_like$/.test(key);\n        var path = key.replace(/(_lte|_gte|_ne|_like)$/, '');\n        chain = chain.filter(function (element) {\n          return arr.map(function (value) {\n            // get item value based on path\n            // i.e post.title -> 'foo'\n            var elementValue = _.get(element, path); // Prevent toString() failing on undefined or null values\n\n\n            if (elementValue === undefined || elementValue === null) {\n              return undefined;\n            }\n\n            if (isRange) {\n              var isLowerThan = /_gte$/.test(key);\n              return isLowerThan ? value <= elementValue : value >= elementValue;\n            } else if (isDifferent) {\n              return value !== elementValue.toString();\n            } else if (isLike) {\n              return new RegExp(value, 'i').test(elementValue.toString());\n            } else {\n              return value === elementValue.toString();\n            }\n          }).reduce(function (a, b) {\n            return isDifferent ? a && b : a || b;\n          });\n        });\n      }\n    }); // Sort\n\n    if (_sort) {\n      var _sortSet = _sort.split(',');\n\n      var _orderSet = (_order || '').split(',').map(function (s) {\n        return s.toLowerCase();\n      });\n\n      chain = chain.orderBy(_sortSet, _orderSet);\n    } // Slice result\n\n\n    if (_end || _limit || _page) {\n      res.setHeader('X-Total-Count', chain.size());\n      res.setHeader('Access-Control-Expose-Headers', \"X-Total-Count\".concat(_page ? ', Link' : ''));\n    }\n\n    if (_page) {\n      _page = parseInt(_page, 10);\n      _page = _page >= 1 ? _page : 1;\n      _limit = parseInt(_limit, 10) || 10;\n      var page = utils.getPage(chain.value(), _page, _limit);\n      var links = {};\n      var fullURL = getFullURL(req);\n\n      if (page.first) {\n        links.first = fullURL.replace(\"page=\".concat(page.current), \"page=\".concat(page.first));\n      }\n\n      if (page.prev) {\n        links.prev = fullURL.replace(\"page=\".concat(page.current), \"page=\".concat(page.prev));\n      }\n\n      if (page.next) {\n        links.next = fullURL.replace(\"page=\".concat(page.current), \"page=\".concat(page.next));\n      }\n\n      if (page.last) {\n        links.last = fullURL.replace(\"page=\".concat(page.current), \"page=\".concat(page.last));\n      }\n\n      res.links(links);\n      chain = _.chain(page.items);\n    } else if (_end) {\n      _start = parseInt(_start, 10) || 0;\n      _end = parseInt(_end, 10);\n      chain = chain.slice(_start, _end);\n    } else if (_limit) {\n      _start = parseInt(_start, 10) || 0;\n      _limit = parseInt(_limit, 10);\n      chain = chain.slice(_start, _start + _limit);\n    } // embed and expand\n\n\n    chain = chain.cloneDeep().forEach(function (element) {\n      embed(element, _embed);\n      expand(element, _expand);\n    });\n    res.locals.data = chain.value();\n    next();\n  } // GET /name/:id\n  // GET /name/:id?_embed=&_expand\n\n\n  function show(req, res, next) {\n    var _embed = req.query._embed;\n    var _expand = req.query._expand;\n    var resource = db.get(name).getById(req.params.id).value();\n\n    if (resource) {\n      // Clone resource to avoid making changes to the underlying object\n      var clone = _.cloneDeep(resource); // Embed other resources based on resource id\n      // /posts/1?_embed=comments\n\n\n      embed(clone, _embed); // Expand inner resources based on id\n      // /posts/1?_expand=user\n\n      expand(clone, _expand);\n      res.locals.data = clone;\n    }\n\n    next();\n  } // POST /name\n\n\n  function create(req, res, next) {\n    var resource;\n\n    if (opts._isFake) {\n      var id = db.get(name).createId().value();\n      resource = _objectSpread(_objectSpread({}, req.body), {}, {\n        id: id\n      });\n    } else {\n      resource = db.get(name).insert(req.body).value();\n    }\n\n    res.setHeader('Access-Control-Expose-Headers', 'Location');\n    res.location(\"\".concat(getFullURL(req), \"/\").concat(resource.id));\n    res.status(201);\n    res.locals.data = resource;\n    next();\n  } // PUT /name/:id\n  // PATCH /name/:id\n\n\n  function update(req, res, next) {\n    var id = req.params.id;\n    var resource;\n\n    if (opts._isFake) {\n      resource = db.get(name).getById(id).value();\n\n      if (req.method === 'PATCH') {\n        resource = _objectSpread(_objectSpread({}, resource), req.body);\n      } else {\n        resource = _objectSpread(_objectSpread({}, req.body), {}, {\n          id: resource.id\n        });\n      }\n    } else {\n      var chain = db.get(name);\n      chain = req.method === 'PATCH' ? chain.updateById(id, req.body) : chain.replaceById(id, req.body);\n      resource = chain.value();\n    }\n\n    if (resource) {\n      res.locals.data = resource;\n    }\n\n    next();\n  } // DELETE /name/:id\n\n\n  function destroy(req, res, next) {\n    var resource;\n\n    if (opts._isFake) {\n      resource = db.get(name).value();\n    } else {\n      resource = db.get(name).removeById(req.params.id).value(); // Remove dependents documents\n\n      var removable = db._.getRemovable(db.getState(), opts);\n\n      removable.forEach(function (item) {\n        db.get(item.name).removeById(item.id).value();\n      });\n    }\n\n    if (resource) {\n      res.locals.data = {};\n    }\n\n    next();\n  }\n\n  var w = write(db);\n  router.route('/').get(list).post(create, w);\n  router.route('/:id').get(show).put(update, w).patch(update, w).delete(destroy, w);\n  return router;\n};","map":null,"metadata":{},"sourceType":"script"}