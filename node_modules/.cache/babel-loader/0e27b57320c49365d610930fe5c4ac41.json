{"ast":null,"code":"/*!\n * errorhandler\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\n\nvar escapeHtml = require('escape-html');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar util = require('util');\n/**\n * Module variables.\n * @private\n */\n\n\nvar DOUBLE_SPACE_REGEXP = /\\x20{2}/g;\nvar NEW_LINE_REGEXP = /\\n/g;\nvar STYLESHEET = fs.readFileSync(path.join(__dirname, '/public/style.css'), 'utf8');\nvar TEMPLATE = fs.readFileSync(path.join(__dirname, '/public/error.html'), 'utf8');\nvar inspect = util.inspect;\nvar toString = Object.prototype.toString;\n/* istanbul ignore next */\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n/**\n * Error handler:\n *\n * Development error handler, providing stack traces\n * and error message responses for requests accepting text, html,\n * or json.\n *\n * Text:\n *\n *   By default, and when _text/plain_ is accepted a simple stack trace\n *   or error message will be returned.\n *\n * JSON:\n *\n *   When _application/json_ is accepted, connect will respond with\n *   an object in the form of `{ \"error\": error }`.\n *\n * HTML:\n *\n *   When accepted connect will output a nice html stack trace.\n *\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function errorHandler(options) {\n  // get environment\n  var env = process.env.NODE_ENV || 'development'; // get options\n\n  var opts = options || {}; // get log option\n\n  var log = opts.log === undefined ? env !== 'test' : opts.log;\n\n  if (typeof log !== 'function' && typeof log !== 'boolean') {\n    throw new TypeError('option log must be function or boolean');\n  } // default logging using console.error\n\n\n  if (log === true) {\n    log = logerror;\n  }\n\n  return function errorHandler(err, req, res, next) {\n    // respect err.statusCode\n    if (err.statusCode) {\n      res.statusCode = err.statusCode;\n    } // respect err.status\n\n\n    if (err.status) {\n      res.statusCode = err.status;\n    } // default status code to 500\n\n\n    if (res.statusCode < 400) {\n      res.statusCode = 500;\n    } // log the error\n\n\n    var str = stringify(err);\n\n    if (log) {\n      defer(log, err, str, req, res);\n    } // cannot actually respond\n\n\n    if (res._header) {\n      return req.socket.destroy();\n    } // negotiate\n\n\n    var accept = accepts(req);\n    var type = accept.type('html', 'json', 'text'); // Security header for content sniffing\n\n    res.setHeader('X-Content-Type-Options', 'nosniff'); // html\n\n    if (type === 'html') {\n      var isInspect = !err.stack && String(err) === toString.call(err);\n      var errorHtml = !isInspect ? escapeHtmlBlock(str.split('\\n', 1)[0] || 'Error') : 'Error';\n      var stack = !isInspect ? String(str).split('\\n').slice(1) : [str];\n      var stackHtml = stack.map(function (v) {\n        return '<li>' + escapeHtmlBlock(v) + '</li>';\n      }).join('');\n      var body = TEMPLATE.replace('{style}', STYLESHEET).replace('{stack}', stackHtml).replace('{title}', escapeHtml(exports.title)).replace('{statusCode}', res.statusCode).replace(/\\{error\\}/g, errorHtml);\n      res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.end(body); // json\n    } else if (type === 'json') {\n      var error = {\n        message: err.message,\n        stack: err.stack\n      };\n\n      for (var prop in err) {\n        error[prop] = err[prop];\n      }\n\n      var json = JSON.stringify({\n        error: error\n      }, null, 2);\n      res.setHeader('Content-Type', 'application/json; charset=utf-8');\n      res.end(json); // plain text\n    } else {\n      res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n      res.end(str);\n    }\n  };\n};\n/**\n * Template title, framework authors may override this value.\n */\n\n\nexports.title = 'Connect';\n/**\n * Escape a block of HTML, preserving whitespace.\n * @api private\n */\n\nfunction escapeHtmlBlock(str) {\n  return escapeHtml(str).replace(DOUBLE_SPACE_REGEXP, ' &nbsp;').replace(NEW_LINE_REGEXP, '<br>');\n}\n/**\n * Stringify a value.\n * @api private\n */\n\n\nfunction stringify(val) {\n  var stack = val.stack;\n\n  if (stack) {\n    return String(stack);\n  }\n\n  var str = String(val);\n  return str === toString.call(val) ? inspect(val) : str;\n}\n/**\n * Log error to console.\n * @api private\n */\n\n\nfunction logerror(err, str) {\n  console.error(str || err.stack);\n}","map":null,"metadata":{},"sourceType":"script"}