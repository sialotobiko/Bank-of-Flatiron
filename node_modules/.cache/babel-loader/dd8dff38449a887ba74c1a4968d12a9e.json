{"ast":null,"code":"var _defineProperty = require(\"/home/moringa/Development/code/phase-2/Phase-2-Hooks-Code-Challenge-Bank-of-Flatiron-100421/code-challenge/node_modules/@babel/runtime/helpers/defineProperty\");\n\n// UUID\n// https://gist.github.com/LeverOne/1308368\n\n/* jshint ignore:start */\nfunction uuid(a, b) {\n  for (b = a = ''; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : '-') {\n    ;\n  }\n\n  return b;\n}\n/* jshint ignore:end */\n\n\nmodule.exports = {\n  // Empties properties\n  __empty: function __empty(doc) {\n    this.forEach(doc, function (value, key) {\n      delete doc[key];\n    });\n  },\n  // Copies properties from an object to another\n  __update: function __update(dest, src) {\n    this.forEach(src, function (value, key) {\n      dest[key] = value;\n    });\n  },\n  // Removes an item from an array\n  __remove: function __remove(array, item) {\n    var index = this.indexOf(array, item);\n    if (index !== -1) array.splice(index, 1);\n  },\n  __id: function __id() {\n    var id = this.id || 'id';\n    return id;\n  },\n  getById: function getById(collection, id) {\n    var self = this;\n    return this.find(collection, function (doc) {\n      if (self.has(doc, self.__id())) {\n        return doc[self.__id()].toString() === id.toString();\n      }\n    });\n  },\n  createId: function createId(collection, doc) {\n    return uuid();\n  },\n  insert: function insert(collection, doc) {\n    doc[this.__id()] = doc[this.__id()] || this.createId(collection, doc);\n    var d = this.getById(collection, doc[this.__id()]);\n    if (d) throw new Error('Insert failed, duplicate id');\n    collection.push(doc);\n    return doc;\n  },\n  upsert: function upsert(collection, doc) {\n    if (doc[this.__id()]) {\n      // id is set\n      var d = this.getById(collection, doc[this.__id()]);\n\n      if (d) {\n        // replace properties of existing object\n        this.__empty(d);\n\n        this.assign(d, doc);\n      } else {\n        // push new object\n        collection.push(doc);\n      }\n    } else {\n      // create id and push new object\n      doc[this.__id()] = this.createId(collection, doc);\n      collection.push(doc);\n    }\n\n    return doc;\n  },\n  updateById: function updateById(collection, id, attrs) {\n    var doc = this.getById(collection, id);\n\n    if (doc) {\n      this.assign(doc, attrs, _defineProperty({}, this.__id(), doc[this.__id()]));\n    }\n\n    return doc;\n  },\n  updateWhere: function updateWhere(collection, predicate, attrs) {\n    var self = this;\n    var docs = this.filter(collection, predicate);\n\n    var key = this.__id();\n\n    docs.forEach(function (doc) {\n      self.assign(doc, attrs, _defineProperty({}, key, doc[key]));\n    });\n    return docs;\n  },\n  replaceById: function replaceById(collection, id, attrs) {\n    var doc = this.getById(collection, id);\n\n    if (doc) {\n      var docId = doc[this.__id()];\n\n      this.__empty(doc);\n\n      this.assign(doc, attrs, _defineProperty({}, this.__id(), docId));\n    }\n\n    return doc;\n  },\n  removeById: function removeById(collection, id) {\n    var doc = this.getById(collection, id);\n\n    this.__remove(collection, doc);\n\n    return doc;\n  },\n  removeWhere: function removeWhere(collection, predicate) {\n    var self = this;\n    var docs = this.filter(collection, predicate);\n    docs.forEach(function (doc) {\n      self.__remove(collection, doc);\n    });\n    return docs;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}