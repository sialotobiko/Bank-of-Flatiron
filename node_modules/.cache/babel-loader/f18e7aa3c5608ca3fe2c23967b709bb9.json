{"ast":null,"code":"/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('method-override');\n\nvar methods = require('methods');\n\nvar parseurl = require('parseurl');\n\nvar querystring = require('querystring');\n\nvar vary = require('vary');\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\n\nmodule.exports = function methodOverride(getter, options) {\n  var opts = options || {}; // get the getter fn\n\n  var get = typeof getter === 'function' ? getter : createGetter(getter || 'X-HTTP-Method-Override'); // get allowed request methods to examine\n\n  var methods = opts.methods === undefined ? ['POST'] : opts.methods;\n  return function methodOverride(req, res, next) {\n    var method;\n    var val;\n    req.originalMethod = req.originalMethod || req.method; // validate request is an allowed method\n\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next();\n    }\n\n    val = get(req, res);\n    method = Array.isArray(val) ? val[0] : val; // replace\n\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase();\n      debug('override %s as %s', req.originalMethod, req.method);\n    }\n\n    next();\n  };\n};\n/**\n * Create a getter for the given string.\n */\n\n\nfunction createGetter(str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str);\n  }\n\n  return createQueryGetter(str);\n}\n/**\n * Create a getter for the given query key name.\n */\n\n\nfunction createQueryGetter(key) {\n  return function (req, res) {\n    var url = parseurl(req);\n    var query = querystring.parse(url.query || '');\n    return query[key];\n  };\n}\n/**\n * Create a getter for the given header name.\n */\n\n\nfunction createHeaderGetter(str) {\n  var name = str.toLowerCase();\n  return function (req, res) {\n    // set appropriate Vary header\n    vary(res, str); // get header\n\n    var header = req.headers[name];\n\n    if (!header) {\n      return undefined;\n    } // multiple headers get joined with comma by node.js core\n\n\n    var index = header.indexOf(','); // return first value\n\n    return index !== -1 ? header.substr(0, index).trim() : header.trim();\n  };\n}\n/**\n * Check if node supports `method`.\n */\n\n\nfunction supports(method) {\n  return method && typeof method === 'string' && methods.indexOf(method.toLowerCase()) !== -1;\n}","map":null,"metadata":{},"sourceType":"script"}