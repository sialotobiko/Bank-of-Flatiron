{"ast":null,"code":"\"use strict\";\n\nvar express = require('express');\n\nvar methodOverride = require('method-override');\n\nvar _ = require('lodash');\n\nvar lodashId = require('lodash-id');\n\nvar low = require('lowdb');\n\nvar Memory = require('lowdb/adapters/Memory');\n\nvar FileSync = require('lowdb/adapters/FileSync');\n\nvar bodyParser = require('../body-parser');\n\nvar validateData = require('./validate-data');\n\nvar plural = require('./plural');\n\nvar nested = require('./nested');\n\nvar singular = require('./singular');\n\nvar mixins = require('../mixins');\n\nmodule.exports = function (db, opts) {\n  opts = Object.assign({\n    foreignKeySuffix: 'Id',\n    _isFake: false\n  }, opts);\n\n  if (typeof db === 'string') {\n    db = low(new FileSync(db));\n  } else if (!_.has(db, '__chain__') || !_.has(db, '__wrapped__')) {\n    db = low(new Memory()).setState(db);\n  } // Create router\n\n\n  var router = express.Router(); // Add middlewares\n\n  router.use(methodOverride());\n  router.use(bodyParser);\n  validateData(db.getState()); // Add lodash-id methods to db\n\n  db._.mixin(lodashId); // Add specific mixins\n\n\n  db._.mixin(mixins); // Expose database\n\n\n  router.db = db; // Expose render\n\n  router.render = function (req, res) {\n    res.jsonp(res.locals.data);\n  }; // GET /db\n\n\n  router.get('/db', function (req, res) {\n    res.jsonp(db.getState());\n  }); // Handle /:parent/:parentId/:resource\n\n  router.use(nested(opts)); // Create routes\n\n  db.forEach(function (value, key) {\n    if (_.isPlainObject(value)) {\n      router.use(\"/\".concat(key), singular(db, key, opts));\n      return;\n    }\n\n    if (_.isArray(value)) {\n      router.use(\"/\".concat(key), plural(db, key, opts));\n      return;\n    }\n\n    var sourceMessage = ''; // if (!_.isObject(source)) {\n    //   sourceMessage = `in ${source}`\n    // }\n\n    var msg = \"Type of \\\"\".concat(key, \"\\\" (\").concat(typeof value, \") \").concat(sourceMessage, \" is not supported. \") + \"Use objects or arrays of objects.\";\n    throw new Error(msg);\n  }).value();\n  router.use(function (req, res) {\n    if (!res.locals.data) {\n      res.status(404);\n      res.locals.data = {};\n    }\n\n    router.render(req, res);\n  });\n  router.use(function (err, req, res, next) {\n    console.error(err.stack);\n    res.status(500).send(err.stack);\n  });\n  return router;\n};","map":null,"metadata":{},"sourceType":"script"}